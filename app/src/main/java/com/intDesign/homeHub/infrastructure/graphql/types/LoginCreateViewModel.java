// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.intDesign.homeHub.infrastructure.graphql.types;

import com.apollographql.apollo.api.InputFieldMarshaller;
import com.apollographql.apollo.api.InputFieldWriter;
import com.apollographql.apollo.api.InputType;
import com.apollographql.apollo.api.internal.Utils;

import org.jetbrains.annotations.NotNull;

import java.io.IOException;

public final class LoginCreateViewModel implements InputType {
    private final @NotNull
    String account;

    private final @NotNull
    String password;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    LoginCreateViewModel(@NotNull String account, @NotNull String password) {
        this.account = account;
        this.password = password;
    }

    public @NotNull
    String account() {
        return this.account;
    }

    public @NotNull
    String password() {
        return this.password;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public InputFieldMarshaller marshaller() {
        return new InputFieldMarshaller() {
            @Override
            public void marshal(InputFieldWriter writer) throws IOException {
                writer.writeString("account", account);
                writer.writeString("password", password);
            }
        };
    }

    @Override
    public int hashCode() {
        if (!$hashCodeMemoized) {
            int h = 1;
            h *= 1000003;
            h ^= account.hashCode();
            h *= 1000003;
            h ^= password.hashCode();
            $hashCode = h;
            $hashCodeMemoized = true;
        }
        return $hashCode;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (o instanceof LoginCreateViewModel) {
            LoginCreateViewModel that = (LoginCreateViewModel) o;
            return this.account.equals(that.account)
                    && this.password.equals(that.password);
        }
        return false;
    }

    public static final class Builder {
        private @NotNull
        String account = "null";

        private @NotNull
        String password = "null";

        Builder() {
        }

        public Builder account(@NotNull String account) {
            this.account = account;
            return this;
        }

        public Builder password(@NotNull String password) {
            this.password = password;
            return this;
        }

        public LoginCreateViewModel build() {
            Utils.checkNotNull(account, "account == null");
            Utils.checkNotNull(password, "password == null");
            return new LoginCreateViewModel(account, password);
        }
    }
}
