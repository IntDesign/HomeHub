// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.intDesign.homeHub.infrastructure.graphql.types;

import com.apollographql.apollo.api.Input;
import com.apollographql.apollo.api.InputFieldMarshaller;
import com.apollographql.apollo.api.InputType;
import com.apollographql.apollo.api.internal.Utils;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class HouseCreateViewModel implements InputType {
    private final @NotNull
    String houseAddress;

    private final @NotNull
    String ownerName;

    private final @NotNull
    String ownerPhone;

    private final Input<String> ownerEmail;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    HouseCreateViewModel(@NotNull String houseAddress, @NotNull String ownerName,
                         @NotNull String ownerPhone, Input<String> ownerEmail) {
        this.houseAddress = houseAddress;
        this.ownerName = ownerName;
        this.ownerPhone = ownerPhone;
        this.ownerEmail = ownerEmail;
    }

    /**
     * House Address
     */
    public @NotNull
    String houseAddress() {
        return this.houseAddress;
    }

    /**
     * The Owner Name
     */
    public @NotNull
    String ownerName() {
        return this.ownerName;
    }

    /**
     * The Owner Phone
     */
    public @NotNull
    String ownerPhone() {
        return this.ownerPhone;
    }

    /**
     * The Owner email
     */
    public @Nullable
    String ownerEmail() {
        return this.ownerEmail.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public InputFieldMarshaller marshaller() {
        return writer -> {
            writer.writeString("houseAddress", houseAddress);
            writer.writeString("ownerName", ownerName);
            writer.writeString("ownerPhone", ownerPhone);
            if (ownerEmail.defined) {
                writer.writeString("ownerEmail", ownerEmail.value);
            }
        };
    }

    @Override
    public int hashCode() {
        if (!$hashCodeMemoized) {
            int h = 1;
            h *= 1000003;
            h ^= houseAddress.hashCode();
            h *= 1000003;
            h ^= ownerName.hashCode();
            h *= 1000003;
            h ^= ownerPhone.hashCode();
            h *= 1000003;
            h ^= ownerEmail.hashCode();
            $hashCode = h;
            $hashCodeMemoized = true;
        }
        return $hashCode;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (o instanceof HouseCreateViewModel) {
            HouseCreateViewModel that = (HouseCreateViewModel) o;
            return this.houseAddress.equals(that.houseAddress)
                    && this.ownerName.equals(that.ownerName)
                    && this.ownerPhone.equals(that.ownerPhone)
                    && this.ownerEmail.equals(that.ownerEmail);
        }
        return false;
    }

    public static final class Builder {
        private @NotNull
        String houseAddress = "null";

        private @NotNull
        String ownerName = "null";

        private @NotNull
        String ownerPhone = "null";

        private Input<String> ownerEmail = Input.fromNullable("null");

        Builder() {
        }

        /**
         * House Address
         */
        public Builder houseAddress(@NotNull String houseAddress) {
            this.houseAddress = houseAddress;
            return this;
        }

        /**
         * The Owner Name
         */
        public Builder ownerName(@NotNull String ownerName) {
            this.ownerName = ownerName;
            return this;
        }

        /**
         * The Owner Phone
         */
        public Builder ownerPhone(@NotNull String ownerPhone) {
            this.ownerPhone = ownerPhone;
            return this;
        }

        /**
         * The Owner email
         */
        public Builder ownerEmail(@Nullable String ownerEmail) {
            this.ownerEmail = Input.fromNullable(ownerEmail);
            return this;
        }

        /**
         * The Owner email
         */
        public Builder ownerEmailInput(@NotNull Input<String> ownerEmail) {
            this.ownerEmail = Utils.checkNotNull(ownerEmail, "ownerEmail == null");
            return this;
        }

        public HouseCreateViewModel build() {
            Utils.checkNotNull(houseAddress, "houseAddress == null");
            Utils.checkNotNull(ownerName, "ownerName == null");
            Utils.checkNotNull(ownerPhone, "ownerPhone == null");
            return new HouseCreateViewModel(houseAddress, ownerName, ownerPhone, ownerEmail);
        }
    }
}
