// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.intDesign.homeHub.infrastructure.graphql.types;

import com.apollographql.apollo.api.Input;
import com.apollographql.apollo.api.InputFieldMarshaller;
import com.apollographql.apollo.api.InputType;
import com.apollographql.apollo.api.internal.Utils;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class MaterialInformationCreateViewModel implements InputType {
    private final @NotNull
    String materialId;

    private final Input<String> providerId;

    private final double appliedLayers;

    private final double pricePerUnit;

    private final double productQuantity;

    private final double consumptionZ;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    MaterialInformationCreateViewModel(@NotNull String materialId, Input<String> providerId,
                                       double appliedLayers, double pricePerUnit, double productQuantity, double consumptionZ) {
        this.materialId = materialId;
        this.providerId = providerId;
        this.appliedLayers = appliedLayers;
        this.pricePerUnit = pricePerUnit;
        this.productQuantity = productQuantity;
        this.consumptionZ = consumptionZ;
    }

    /**
     * Material Info Material Id
     */
    public @NotNull
    String materialId() {
        return this.materialId;
    }

    /**
     * Material Info Provider Id
     */
    public @Nullable
    String providerId() {
        return this.providerId.value;
    }

    /**
     * Material Info Applied Layers
     */
    public double appliedLayers() {
        return this.appliedLayers;
    }

    /**
     * Material Price for a Unit
     */
    public double pricePerUnit() {
        return this.pricePerUnit;
    }

    /**
     * Product Quantity
     */
    public double productQuantity() {
        return this.productQuantity;
    }

    /**
     * Z
     */
    public double consumptionZ() {
        return this.consumptionZ;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public InputFieldMarshaller marshaller() {
        return writer -> {
            writer.writeString("materialId", materialId);
            if (providerId.defined) {
                writer.writeString("providerId", providerId.value);
            }
            writer.writeDouble("appliedLayers", appliedLayers);
            writer.writeDouble("pricePerUnit", pricePerUnit);
            writer.writeDouble("productQuantity", productQuantity);
            writer.writeDouble("consumptionZ", consumptionZ);
        };
    }

    @Override
    public int hashCode() {
        if (!$hashCodeMemoized) {
            int h = 1;
            h *= 1000003;
            h ^= materialId.hashCode();
            h *= 1000003;
            h ^= providerId.hashCode();
            h *= 1000003;
            h ^= Double.valueOf(appliedLayers).hashCode();
            h *= 1000003;
            h ^= Double.valueOf(pricePerUnit).hashCode();
            h *= 1000003;
            h ^= Double.valueOf(productQuantity).hashCode();
            h *= 1000003;
            h ^= Double.valueOf(consumptionZ).hashCode();
            $hashCode = h;
            $hashCodeMemoized = true;
        }
        return $hashCode;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (o instanceof MaterialInformationCreateViewModel) {
            MaterialInformationCreateViewModel that = (MaterialInformationCreateViewModel) o;
            return this.materialId.equals(that.materialId)
                    && this.providerId.equals(that.providerId)
                    && Double.doubleToLongBits(this.appliedLayers) == Double.doubleToLongBits(that.appliedLayers)
                    && Double.doubleToLongBits(this.pricePerUnit) == Double.doubleToLongBits(that.pricePerUnit)
                    && Double.doubleToLongBits(this.productQuantity) == Double.doubleToLongBits(that.productQuantity)
                    && Double.doubleToLongBits(this.consumptionZ) == Double.doubleToLongBits(that.consumptionZ);
        }
        return false;
    }

    public static final class Builder {
        private @NotNull
        String materialId = "null";

        private Input<String> providerId = Input.fromNullable("null");

        private double appliedLayers;

        private double pricePerUnit;

        private double productQuantity;

        private double consumptionZ;

        Builder() {
        }

        /**
         * Material Info Material Id
         */
        public Builder materialId(@NotNull String materialId) {
            this.materialId = materialId;
            return this;
        }

        /**
         * Material Info Provider Id
         */
        public Builder providerId(@Nullable String providerId) {
            this.providerId = Input.fromNullable(providerId);
            return this;
        }

        /**
         * Material Info Applied Layers
         */
        public Builder appliedLayers(double appliedLayers) {
            this.appliedLayers = appliedLayers;
            return this;
        }

        /**
         * Material Price for a Unit
         */
        public Builder pricePerUnit(double pricePerUnit) {
            this.pricePerUnit = pricePerUnit;
            return this;
        }

        /**
         * Product Quantity
         */
        public Builder productQuantity(double productQuantity) {
            this.productQuantity = productQuantity;
            return this;
        }

        /**
         * Z
         */
        public Builder consumptionZ(double consumptionZ) {
            this.consumptionZ = consumptionZ;
            return this;
        }

        /**
         * Material Info Provider Id
         */
        public Builder providerIdInput(@NotNull Input<String> providerId) {
            this.providerId = Utils.checkNotNull(providerId, "providerId == null");
            return this;
        }

        public MaterialInformationCreateViewModel build() {
            Utils.checkNotNull(materialId, "materialId == null");
            return new MaterialInformationCreateViewModel(materialId, providerId, appliedLayers, pricePerUnit, productQuantity, consumptionZ);
        }
    }
}
