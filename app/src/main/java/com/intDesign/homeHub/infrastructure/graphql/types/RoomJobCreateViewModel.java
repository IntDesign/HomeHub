// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.intDesign.homeHub.infrastructure.graphql.types;

import com.apollographql.apollo.api.Input;
import com.apollographql.apollo.api.InputFieldMarshaller;
import com.apollographql.apollo.api.InputType;
import com.apollographql.apollo.api.internal.Utils;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class RoomJobCreateViewModel implements InputType {
    private final Input<Object> startDate;

    private final Input<Object> finishDate;

    private final @NotNull
    JobRequestType type;

    private final @NotNull
    String roomId;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    RoomJobCreateViewModel(Input<Object> startDate, Input<Object> finishDate,
                           @NotNull JobRequestType type, @NotNull String roomId) {
        this.startDate = startDate;
        this.finishDate = finishDate;
        this.type = type;
        this.roomId = roomId;
    }

    /**
     * The date this job will start
     */
    public @Nullable
    Object startDate() {
        return this.startDate.value;
    }

    /**
     * The date this job will be finished
     */
    public @Nullable
    Object finishDate() {
        return this.finishDate.value;
    }

    /**
     * The type of the job that will ne applied on the room
     */
    public @NotNull
    JobRequestType type() {
        return this.type;
    }

    /**
     * The room id of the room that contains this job
     */
    public @NotNull
    String roomId() {
        return this.roomId;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public InputFieldMarshaller marshaller() {
        return writer -> {
            if (startDate.defined) {
                writer.writeCustom("startDate", CustomType.DATETIME, startDate.value != null ? startDate.value : null);
            }
            if (finishDate.defined) {
                writer.writeCustom("finishDate", CustomType.DATETIME, finishDate.value != null ? finishDate.value : null);
            }
            writer.writeString("type", type.rawValue());
            writer.writeString("roomId", roomId);
        };
    }

    @Override
    public int hashCode() {
        if (!$hashCodeMemoized) {
            int h = 1;
            h *= 1000003;
            h ^= startDate.hashCode();
            h *= 1000003;
            h ^= finishDate.hashCode();
            h *= 1000003;
            h ^= type.hashCode();
            h *= 1000003;
            h ^= roomId.hashCode();
            $hashCode = h;
            $hashCodeMemoized = true;
        }
        return $hashCode;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) {
            return true;
        }
        if (o instanceof RoomJobCreateViewModel) {
            RoomJobCreateViewModel that = (RoomJobCreateViewModel) o;
            return this.startDate.equals(that.startDate)
                    && this.finishDate.equals(that.finishDate)
                    && this.type.equals(that.type)
                    && this.roomId.equals(that.roomId);
        }
        return false;
    }

    public static final class Builder {
        private Input<Object> startDate = Input.absent();

        private Input<Object> finishDate = Input.absent();

        private @NotNull
        JobRequestType type = JobRequestType.safeValueOf("null");

        private @NotNull
        String roomId = "null";

        Builder() {
        }

        /**
         * The date this job will start
         */
        public Builder startDate(@Nullable Object startDate) {
            this.startDate = Input.fromNullable(startDate);
            return this;
        }

        /**
         * The date this job will be finished
         */
        public Builder finishDate(@Nullable Object finishDate) {
            this.finishDate = Input.fromNullable(finishDate);
            return this;
        }

        /**
         * The type of the job that will ne applied on the room
         */
        public Builder type(@NotNull JobRequestType type) {
            this.type = type;
            return this;
        }

        /**
         * The room id of the room that contains this job
         */
        public Builder roomId(@NotNull String roomId) {
            this.roomId = roomId;
            return this;
        }

        /**
         * The date this job will start
         */
        public Builder startDateInput(@NotNull Input<Object> startDate) {
            this.startDate = Utils.checkNotNull(startDate, "startDate == null");
            return this;
        }

        /**
         * The date this job will be finished
         */
        public Builder finishDateInput(@NotNull Input<Object> finishDate) {
            this.finishDate = Utils.checkNotNull(finishDate, "finishDate == null");
            return this;
        }

        public RoomJobCreateViewModel build() {
            Utils.checkNotNull(type, "type == null");
            Utils.checkNotNull(roomId, "roomId == null");
            return new RoomJobCreateViewModel(startDate, finishDate, type, roomId);
        }
    }
}
